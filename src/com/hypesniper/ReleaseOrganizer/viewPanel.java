/*
1st panel of gui
Display releases, filters and sorts them
 */
package com.hypesniper.ReleaseOrganizer;

import com.hypesniper.ReleaseOrganizer.auxilliary.ContextMenuMouseListener;
import com.hypesniper.ReleaseOrganizer.model.Release;
import com.hypesniper.ReleaseOrganizer.auxilliary.popupPanel;
import java.awt.Desktop;
import java.net.URI;
import java.net.URL;
import java.util.ArrayList;
import java.util.Comparator;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class viewPanel extends javax.swing.JPanel {

    /**
     * Creates new form viewPanel
     */
    DataOperationsHandler operationHandler;
    DefaultTableModel model;
    TableRowSorter<DefaultTableModel> sorter;
    Release selectedRelease;
    ArrayList<Release> releases;

    public viewPanel() {
        initComponents();
        model = (DefaultTableModel) tableView.getModel();
        sorter = new TableRowSorter<>(model);
        setSorter();

    }

    // OrganizerGUI passes DataOperationsHandler after adding to tab
    public void setOperationHandler(DataOperationsHandler dataOp) {
        this.operationHandler = dataOp;
        releases = operationHandler.getAllReleases();
    }

    // Table has a hidden(actualy visible but 0px width) tags column
    // this method first assigns tags to releases then adds to table
    // So releases can be filtered by these tags via combobox (comboFilter)
    // Filter is case sensitive on tag column
    protected void populateTable() {

        model.setRowCount(0);
        for (Release r : releases) {

            //start tagging   
            String tag = ""; // If bot entered it is botable else non-botable
            if (!"".equals(r.getBot())) {
                tag += "Botable";
            } else {
                tag += "Non-botable";
            }

            // If no date or date exists but no time (00:00) it is a random drop
            // when user inputs 00:00 in edit panel it is a midnight drop
            // midnight drops are subtracted 1 min (a day before 23:59)
            if ("".equals(r.getFormattedDate()) || r.getFormattedDate().contains("00:00")) {
                tag += " Random-drop";
            }else{
                tag += " Non-random";
            
            }
            if ("Yes".equals(r.getShopify())) {
                tag += " Shopify";
            }
            if ("Yes".equals(r.getQueue())) {
                tag += " Queue";
            }//end tagging, "tag column is 0px width and it is there for filtering purposes"

            Object[] rowData
                    = {r.getFormattedDate().replace("00:00", ""), r.getBot(), r.getShopify(),
                        r.getisEarlyLink() ? "Early" : "Collection", 
                        r.getTrimmedLink(),r.getQueue(), 
                        tag, r.getNotes()};
            model.addRow(rowData);
        } // end iteration of all releases
        sortTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtFilter = new javax.swing.JTextField();
        buttonReset = new javax.swing.JButton();
        comboFilter = new javax.swing.JComboBox<>();
        lblSearch = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableView = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        try{
            URL img = new URL("http://hypesniper.com/banner.jpg");
            ImageIcon image = new ImageIcon(img);
            bannerLabel = new javax.swing.JLabel("", image, JLabel.CENTER);

            setPreferredSize(new java.awt.Dimension(800, 440));

            jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jPanel1.setPreferredSize(new java.awt.Dimension(304, 56));

            txtFilter.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
            txtFilter.setToolTipText("Type to Search");
            txtFilter.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    txtFilterActionPerformed(evt);
                }
            });
            txtFilter.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    txtFilterKeyReleased(evt);
                }
            });

            buttonReset.setText("R");
            buttonReset.setToolTipText("Reset Filters");
            buttonReset.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    buttonResetActionPerformed(evt);
                }
            });

            comboFilter.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
            comboFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Botable", "Non-botable", "Shopify", "Queue", "Random-drop", "Non-random" }));
            comboFilter.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    comboFilterActionPerformed(evt);
                }
            });

            lblSearch.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
            lblSearch.setForeground(new java.awt.Color(51, 51, 51));
            lblSearch.setLabelFor(txtFilter);
            lblSearch.setText("Keyword Search:");

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(comboFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 150, Short.MAX_VALUE)
                    .addComponent(lblSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(buttonReset, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(8, 8, 8))
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonReset, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblSearch))
                    .addGap(14, 14, 14))
            );

            jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblSearch, txtFilter});

            txtFilter.addMouseListener(new ContextMenuMouseListener());

            jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

            tableView.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
            tableView.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null}
                },
                new String [] {
                    "Date", "Bot", "Shopify", "Early/Site", "Link", "Queue", "Tags", "Notes"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
                };
                boolean[] canEdit = new boolean [] {
                    false, false, false, false, false, false, false, false
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            tableView.setRowHeight(20);
            tableView.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    tableViewMouseClicked(evt);
                }
            });
            jScrollPane1.setViewportView(tableView);
            if (tableView.getColumnModel().getColumnCount() > 0) {
                tableView.getColumnModel().getColumn(0).setPreferredWidth(145);
                tableView.getColumnModel().getColumn(0).setMaxWidth(155);
                tableView.getColumnModel().getColumn(1).setPreferredWidth(60);
                tableView.getColumnModel().getColumn(1).setMaxWidth(99);
                tableView.getColumnModel().getColumn(2).setPreferredWidth(50);
                tableView.getColumnModel().getColumn(2).setMaxWidth(60);
                tableView.getColumnModel().getColumn(3).setPreferredWidth(72);
                tableView.getColumnModel().getColumn(3).setMaxWidth(88);
                tableView.getColumnModel().getColumn(5).setPreferredWidth(50);
                tableView.getColumnModel().getColumn(5).setMaxWidth(60);
                tableView.getColumnModel().getColumn(6).setMinWidth(0);
                tableView.getColumnModel().getColumn(6).setPreferredWidth(0);
                tableView.getColumnModel().getColumn(6).setMaxWidth(0);
            }

            javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
            jPanel2.setLayout(jPanel2Layout);
            jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE)
            );
            jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
            );

            jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

            if(image.getIconWidth() < 0){
                bannerLabel.setText("Sneaker scraper finds early links, restocks, and sitting stock on 300+ sneaker sites");
            }
        }
        catch(Exception e){
            bannerLabel.setText("Sneaker scraper finds early links, restocks, and sitting stock on 300+ sneaker sites");
        }
        bannerLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bannerLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bannerLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bannerLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bannerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bannerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFilterActionPerformed

    private void buttonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonResetActionPerformed
        // resets keyword and combo filter
        txtFilter.setText("");
        comboFilter.setSelectedIndex(0);
        populateTable();

    }//GEN-LAST:event_buttonResetActionPerformed

    private void txtFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFilterKeyReleased
        // after a text entered filters dynamically
        filterTable();
    }//GEN-LAST:event_txtFilterKeyReleased

    private void comboFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboFilterActionPerformed
        // filters by tags
        filterTable();
        if (comboFilter.getSelectedItem().toString().equals("Random-drop")) {
            sortRandomDrop();
        } else {
            sortTable();
        }
    }//GEN-LAST:event_comboFilterActionPerformed

    // when double clicked to a row
    // shows info of release in popupPanel
    private void tableViewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableViewMouseClicked
        // Check if it is a double-click
        if (evt.getClickCount() == 2) {
            popupPanel popPanel = new popupPanel();
            int viewRow = tableView.getSelectedRow();
            int modelRow = tableView.convertRowIndexToModel(viewRow);
            popPanel.setLabels(releases.get(modelRow));
            JOptionPane.showMessageDialog(tableView, popPanel, "Release Info", JOptionPane.PLAIN_MESSAGE);

        }
    }//GEN-LAST:event_tableViewMouseClicked

    private void bannerLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bannerLabelMouseClicked
        // when banner clicked, opens a static URL in browser
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI("http://hypesniper.com/scraper.htm"));
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_bannerLabelMouseClicked

    // contractor wanted to see releases without date at bottom
    // by default blank values are first in order
    // overridden comparator makes blank values go bottom
    // comparator is applied only to clumn 0 (Date column)
    private void setSorter() {
        sorter.setComparator(0, new Comparator<String>() {
            @Override
            public int compare(String item1, String item2) {
                if (item1.equals(item2)) {  // this is vital
                    return 0;               // for multiple column sorts
                } else if ("".equals(item2)) {
                    return -1;
                } else if ("".equals(item1)) {
                    return 1;
                } else {
                    return item1.compareTo(item2);
                }
            }
        });

        tableView.setRowSorter(sorter);
    }

    //table is sorted by link and date
    private void sortTable() {
        ArrayList<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
        sortKeys.add(new RowSorter.SortKey(4, SortOrder.ASCENDING));
        sorter.setSortKeys(sortKeys);
        sorter.sort();

    }

    // Compound row filter of keyword and tag
    private void filterTable() {

        RowFilter<DefaultTableModel, Object> keywordFilter;
        RowFilter<DefaultTableModel, Object> tagFilter;
        ArrayList<RowFilter<DefaultTableModel, Object>> filters
                = new ArrayList<>();
        RowFilter<DefaultTableModel, Object> compoundRowFilter;

        try {
            keywordFilter = RowFilter.regexFilter("(?i)" + txtFilter.getText());
            // (?i) for case-insensitive search
            String tag = comboFilter.getSelectedItem().toString();

            if (tag == "All") { // if All selected in the combobox
                tag = "";       // do not filter 
            }
            tagFilter = RowFilter.regexFilter(tag, 6); // case sensitive filter to 6th column
            filters.add(tagFilter);
            filters.add(keywordFilter);
            compoundRowFilter = RowFilter.andFilter(filters);

        } catch (java.util.regex.PatternSyntaxException e) {
            System.out.println("patternSyntaxException occured");
            return;
        }
        //table.setRowSorter(sorter);
        sorter.setRowFilter(compoundRowFilter);

    }

    //Contractor wanted ,when filtered by random drop 
    //Random drops to be sorted by bots column
    private void sortRandomDrop() {
        ArrayList<RowSorter.SortKey> sortKeys = new ArrayList<>();

        sortKeys.add(new RowSorter.SortKey(1, SortOrder.DESCENDING));
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
        sortKeys.add(new RowSorter.SortKey(4, SortOrder.ASCENDING));
        sorter.setSortKeys(sortKeys);
        sorter.sort();

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bannerLabel;
    private javax.swing.JButton buttonReset;
    private javax.swing.JComboBox<String> comboFilter;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JTable tableView;
    private javax.swing.JTextField txtFilter;
    // End of variables declaration//GEN-END:variables
}
