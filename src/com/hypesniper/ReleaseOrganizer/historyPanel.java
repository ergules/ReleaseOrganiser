/*
3rd tab of gui
displays expired releases

 */
package com.hypesniper.ReleaseOrganizer;

import com.hypesniper.ReleaseOrganizer.model.Release;
import com.hypesniper.ReleaseOrganizer.auxilliary.popupPanel;
import java.awt.Desktop;
import java.net.URI;
import java.net.URL;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class historyPanel extends javax.swing.JPanel {

    DataOperationsHandler operationHandler;
    DefaultTableModel model;
    TableRowSorter<DefaultTableModel> sorter;
    ArrayList<Release> pastReleases;

    /**
     * Creates new form historyPanel
     */
    public historyPanel() {
        initComponents();
        model = (DefaultTableModel) tableHistoryPanel.getModel();
        // sorter is created automaticaly but assigned here adain to gain access  
        sorter = new TableRowSorter<>(model);
        tableHistoryPanel.setRowSorter(sorter);
    }

    //Organizer GUI passes DataOpHandler with this method
    public void setOperationHandler(DataOperationsHandler dataOp) {
        this.operationHandler = dataOp;
        pastReleases = operationHandler.getPastReleases();
    }

    // method to add rows to table
    // in this case table is filed with expired releases
    protected void populateTable() {
        model.setRowCount(0);
        for (Release r : pastReleases) {
            Object[] rowData
                    = {r.getFormattedDate(), r.getBot(), r.getShopify(),
                        r.getisEarlyLink() ? "Early" : "Collection", r.getLink(),
                        r.getQueue(), r.getNotes()};
            model.addRow(rowData);
            sortByDate();
        }
    }

    protected void sortByDate() { // sorts table by date descending
        ArrayList<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.DESCENDING));
        sorter.setSortKeys(sortKeys);
        sorter.sort();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtFilter = new javax.swing.JTextField();
        LblSearch = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableHistoryPanel = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        try{
            URL img = new URL("http://hypesniper.com/pabanner.jpg");
            ImageIcon image = new ImageIcon(img);
            bannerLabel = new javax.swing.JLabel("", image, JLabel.CENTER);

            jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

            txtFilter.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
            txtFilter.setToolTipText("Type to Search");
            txtFilter.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    txtFilterActionPerformed(evt);
                }
            });
            txtFilter.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    txtFilterKeyReleased(evt);
                }
            });

            LblSearch.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
            LblSearch.setForeground(new java.awt.Color(51, 51, 51));
            LblSearch.setText("Keyword Search:");

            jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/info.png"))); // NOI18N
            jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jLabel2MouseClicked(evt);
                }
            });

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel2)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LblSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap())
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LblSearch)))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

            tableHistoryPanel.setAutoCreateRowSorter(true);
            tableHistoryPanel.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
            tableHistoryPanel.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null}
                },
                new String [] {
                    "Date", "Bot", "Shopify", "Is Early ", "Link", "Queue", "Notes"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
                };
                boolean[] canEdit = new boolean [] {
                    false, false, false, false, false, false, false
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            tableHistoryPanel.setToolTipText("Double-Click for details, del to delete ");
            tableHistoryPanel.setRowHeight(20);
            tableHistoryPanel.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            tableHistoryPanel.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    tableHistoryPanelMouseClicked(evt);
                }
            });
            tableHistoryPanel.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyPressed(java.awt.event.KeyEvent evt) {
                    tableHistoryPanelKeyPressed(evt);
                }
            });
            jScrollPane1.setViewportView(tableHistoryPanel);

            javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
            jPanel2.setLayout(jPanel2Layout);
            jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 781, Short.MAX_VALUE)
            );
            jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
            );

            jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

            if(image.getIconWidth() < 0){
                bannerLabel.setText("Sneaker scraper finds early links, restocks, and sitting stock on 300+ sneaker sites");
            }
        }
        catch(Exception e){
            bannerLabel.setText("Sneaker scraper finds early links, restocks, and sitting stock on 300+ sneaker sites");
        }
        bannerLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bannerLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bannerLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bannerLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 781, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(2, 2, 2)
                    .addComponent(bannerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE)
                    .addGap(3, 3, 3)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 66, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(bannerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFilterActionPerformed

    private void txtFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFilterKeyReleased
        // TODO add your handling code here:
        filterTable();
    }//GEN-LAST:event_txtFilterKeyReleased

    private void tableHistoryPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableHistoryPanelMouseClicked
        // Check if it is a double click:
        // Then shows popupPanel
        if (evt.getClickCount() == 2) {
            int viewRow = tableHistoryPanel.getSelectedRow();
            int modelRow = tableHistoryPanel.convertRowIndexToModel(viewRow);
            popupPanel popPanel = new popupPanel();
            popPanel.setLabels(pastReleases.get(modelRow));
            JOptionPane.showMessageDialog(tableHistoryPanel, popPanel, "information", JOptionPane.PLAIN_MESSAGE);

        }
    }//GEN-LAST:event_tableHistoryPanelMouseClicked

    private void tableHistoryPanelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableHistoryPanelKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) { // if pressed key is del
            int[] selectedRows = tableHistoryPanel.getSelectedRows();
            ArrayList<Release> auxiliary = new ArrayList<>();
            String message = "You are about to delete " + selectedRows.length + " items forever.\n"
                    + "Are you sure?";

            int dialogResult = JOptionPane.showConfirmDialog(tableHistoryPanel,
                    message, "Confirm Delete", JOptionPane.OK_CANCEL_OPTION);
            if (dialogResult == JOptionPane.YES_OPTION) {
                for (int selectedRow : selectedRows) {
                    int modelRow = tableHistoryPanel.convertRowIndexToModel(selectedRow);
                    // have to store in aux ary because when you remove from array
                    // index changes
                    auxiliary.add(pastReleases.get(modelRow));
                }

                for (Release r : auxiliary) {
                    pastReleases.remove(r);
                }
                operationHandler.saveHistory();
                populateTable();
            }
        }
    }//GEN-LAST:event_tableHistoryPanelKeyPressed

    // shows help message
    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        String msg = "\n"
                + "You can view releases older than one day here.\n"
                + "You can double-click an item for details.\n\n"
                + "Press 'del' button to remove selected items\n"
                + "You can use Ctrl for multiple line selection \n"
                + "also Shift for range selection.\n\n";

        JOptionPane.showMessageDialog(this, msg, "History Tab Info", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jLabel2MouseClicked

    // ad banner
    private void bannerLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bannerLabelMouseClicked
        // TODO add your handling code here:
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI("http://hypesniper.com/pagealert.htm"));
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_bannerLabelMouseClicked

    // regex filter
    private void filterTable() {
        RowFilter<DefaultTableModel, Object> rf = null;
        try {
            rf = RowFilter.regexFilter("(?i)" + txtFilter.getText());
            sorter.setRowFilter(rf);
        } catch (java.util.regex.PatternSyntaxException e) {
            return;
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LblSearch;
    private javax.swing.JLabel bannerLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableHistoryPanel;
    private javax.swing.JTextField txtFilter;
    // End of variables declaration//GEN-END:variables
}
